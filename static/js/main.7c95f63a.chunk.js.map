{"version":3,"sources":["Header/GuestInputForm.js","Header/index.js","MainContent/GuestList/GuestName.js","MainContent/GuestList/Guest.js","MainContent/GuestList/PendingGuest.js","MainContent/GuestList/index.js","MainContent/Counter.js","MainContent/ConfirmedFilter.js","MainContent/index.js","App.js","reportWebVitals.js","index.js"],"names":["GuestInputForm","props","onSubmit","newGuestSubmitHandler","type","onChange","handleNameInput","value","pendingGuest","placeholder","name","Header","GuestName","isEditting","children","handleNameEdits","Guest","e","setName","target","checked","isConfirmed","handleConfirmation","onClick","handleToggleEditting","handleRemove","PendingGuest","className","GuestList","guests","filter","guest","isFiltered","map","index","toggleConfirmationAt","id","toggleEdittingAt","text","setNameAt","removeGuestAt","Counter","numberAttending","numberUnconfirmed","totalInvited","ConfirmedFilter","toggleFilter","MainContent","App","state","lastGuestId","newGuestId","toggleGuestPropertyAt","property","setState","preventDefault","getTotalInvited","length","getAttendingGuests","reduce","total","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c95f63a.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GuestInputForm = props => {\r\n  return (\r\n    <form onSubmit={props.newGuestSubmitHandler}>\r\n      <input\r\n        type=\"text\"\r\n        onChange={props.handleNameInput}\r\n        value={props.pendingGuest}\r\n        placeholder=\"Invite Someone\" />\r\n      <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nGuestInputForm.propTypes = {\r\n  newGuestSubmitHandler: PropTypes.func.isRequired,\r\n  pendingGuest: PropTypes.string.isRequired,\r\n  handleNameInput: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GuestInputForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GuestInputForm from './GuestInputForm';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header>\r\n            <h1>RSVP</h1>\r\n            <p>A Treehouse App</p>\r\n            <GuestInputForm\r\n                newGuestSubmitHandler={props.newGuestSubmitHandler}\r\n                pendingGuest={props.pendingGuest}\r\n                handleNameInput={props.handleNameInput}\r\n            />\r\n        </header>\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n    newGuestSubmitHandler: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired,\r\n    handleNameInput: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GuestName = props => {\r\n    if (props.isEditting) {\r\n        return (\r\n            <input \r\n                type=\"text\" \r\n                value={props.children}\r\n                onChange={props.handleNameEdits} />\r\n        );\r\n    }\r\n    return (\r\n        <span>\r\n            {props.children}\r\n        </span>\r\n    );\r\n}\r\n\r\nGuestName.propTypes = {\r\n    isEditting: PropTypes.bool.isRequired,\r\n    handleNameEdits: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default GuestName;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GuestName from './GuestName';\r\n\r\nconst Guest = props => {\r\n    return (\r\n        <li>\r\n            <GuestName \r\n                isEditting={props.isEditting}\r\n                handleNameEdits={e => props.setName(e.target.value)}>\r\n                {props.name}\r\n            </GuestName>\r\n            \r\n            <label>\r\n                <input  type=\"checkbox\" \r\n                        checked={props.isConfirmed}\r\n                        onChange={props.handleConfirmation} /> Confirmed\r\n            </label>\r\n            <button onClick={props.handleToggleEditting}>{props.isEditting ? 'save' : 'edit'}</button>\r\n            <button onClick={props.handleRemove}>remove</button>\r\n        </li>        \r\n    );\r\n}\r\n\r\nGuest.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    isConfirmed: PropTypes.bool.isRequired,\r\n    isEditting: PropTypes.bool.isRequired,\r\n    handleConfirmation: PropTypes.func.isRequired,\r\n    handleToggleEditting: PropTypes.func.isRequired,\r\n    setName: PropTypes.func.isRequired,\r\n    handleRemove: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Guest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PendingGuest = props => {\r\n    if (props.name) {\r\n        return (\r\n            <li className=\"pending\">\r\n                <span>{props.name}</span>                        \r\n            </li>        \r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nPendingGuest.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default PendingGuest;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Guest from './Guest';\r\nimport PendingGuest from './PendingGuest';\r\n\r\nconst GuestList = props => {\r\n    return (\r\n        <ul>\r\n            <PendingGuest name={props.pendingGuest} />\r\n            {\r\n                props.guests\r\n                    .filter(guest => !props.isFiltered || guest.isConfirmed)\r\n                    .map((guest, index) =>\r\n                    <Guest  key={index} \r\n                            name={guest.name} \r\n                            isConfirmed={guest.isConfirmed}\r\n                            isEditting={guest.isEditting}\r\n                            handleConfirmation={() => props.toggleConfirmationAt(guest.id)}\r\n                            handleToggleEditting={() => props.toggleEdittingAt(guest.id)}\r\n                            setName={text => props.setNameAt(text, guest.id)}\r\n                            handleRemove={() => props.removeGuestAt(guest.id)} />\r\n                )\r\n            }\r\n        </ul>\r\n    );\r\n}\r\n\r\nGuestList.propTypes = {\r\n    guests: PropTypes.array.isRequired,\r\n    toggleConfirmationAt: PropTypes.func.isRequired,\r\n    toggleEdittingAt: PropTypes.func.isRequired,\r\n    setNameAt: PropTypes.func.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired,\r\n    removeGuestAt: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default GuestList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Counter = props => {\r\n    return (\r\n        <table className=\"counter\">\r\n            <tbody>\r\n                <tr>\r\n                    <td>Attending:</td>\r\n                    <td>{props.numberAttending}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Unconfirmed:</td>\r\n                    <td>{props.numberUnconfirmed}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Total:</td>\r\n                    <td>{props.totalInvited}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nCounter.propTypes = {\r\n    numberAttending: PropTypes.number,\r\n    numberUnconfirmed: PropTypes.number,\r\n    totalInvited: PropTypes.number,\r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ConfirmedFilter = props => {\r\n    return (\r\n        <div>\r\n            <h2>Invitees</h2>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={props.toggleFilter}\r\n                    checked={props.isFiltered} /> Hide those who haven't responded\r\n            </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nConfirmedFilter.propTypes = {\r\n    toggleFilter: PropTypes.func.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default ConfirmedFilter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport GuestList from './GuestList';\r\nimport Counter from './Counter';\r\nimport ConfirmedFilter from './ConfirmedFilter';\r\n\r\nconst MainContent = props => {\r\n    return (\r\n        <div className=\"main\">\r\n            <ConfirmedFilter \r\n                toggleFilter={props.toggleFilter}\r\n                isFiltered={props.isFiltered}\r\n            />\r\n\r\n            <Counter totalInvited={props.totalInvited}\r\n                numberAttending={props.numberAttending}\r\n                numberUnconfirmed={props.numberUnconfirmed} />\r\n            <GuestList guests={props.guests}\r\n                toggleConfirmationAt={props.toggleConfirmationAt}\r\n                toggleEdittingAt={props.toggleEdittingAt}\r\n                setNameAt={props.setNameAt}\r\n                isFiltered={props.isFiltered}\r\n                removeGuestAt={props.removeGuestAt}\r\n                pendingGuest={props.pendingGuest} />\r\n        </div>\r\n    );\r\n}\r\n\r\nMainContent.propTypes = {\r\n    removeGuestAt: PropTypes.func.isRequired,\r\n    pendingGuest: PropTypes.string.isRequired,\r\n    isFiltered: PropTypes.bool.isRequired,\r\n    setNameAt: PropTypes.func.isRequired,\r\n    toggleEdittingAt: PropTypes.func.isRequired,\r\n    toggleConfirmationAt: PropTypes.func.isRequired,\r\n    guests: PropTypes.array.isRequired,\r\n    numberUnconfirmed: PropTypes.number,\r\n    numberAttending: PropTypes.number,\r\n    totalInvited: PropTypes.number,\r\n    toggleFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default MainContent;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './Header';\nimport MainContent from './MainContent';\n\nclass App extends Component {\n\n  state = {\n    isFiltered: false,\n    pendingGuest: \"\",\n    guests: [],\n  };\n\n  lastGuestId = 0;\n\n  newGuestId = () => {\n    const id = this.lastGuestId;\n    this.lastGuestId += 1;\n    return id;\n  }\n\n  toggleGuestPropertyAt = (property, id) => {\n    this.setState({\n      guests: this.state.guests.map((guest) => {\n        if (id === guest.id) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          };\n        }\n        return guest;\n      })\n    })\n  }\n\n  toggleConfirmationAt = id => this.toggleGuestPropertyAt('isConfirmed', id);\n\n  removeGuestAt = id => {\n    this.setState({\n      guests: this.state.guests.filter(guest => id !== guest.id)\n    });\n  };\n\n  toggleEdittingAt = id => this.toggleGuestPropertyAt('isEditting', id);\n\n  setNameAt = (name, id) => {\n    this.setState({\n      guests: this.state.guests.map((guest) => {\n        if (guest.id === id) {\n          return {\n            ...guest,\n            name\n          };\n        }\n        return guest;\n      })\n    })\n  }\n\n  toggleFilter = () => this.setState({ isFiltered: !this.state.isFiltered })\n\n  handleNameInput = e => this.setState({ pendingGuest: e.target.value });\n\n  newGuestSubmitHandler = e => {\n    e.preventDefault();\n    const id = this.newGuestId();\n    this.setState({\n      guests: [\n        {\n          name: this.state.pendingGuest,\n          isConfirmed: false,\n          isEditting: false,\n          id\n        },\n        ...this.state.guests\n      ],\n      pendingGuest: ''\n    })\n  }\n\n  getTotalInvited = () => this.state.guests.length;\n  getAttendingGuests = () => this.state.guests.reduce((total, guest) => {\n    return guest.isConfirmed ? total + 1 : total;\n  }, 0)\n\n\n  render() {\n    const totalInvited = this.getTotalInvited();\n    const numberAttending = this.getAttendingGuests();\n    const numberUnconfirmed = totalInvited - numberAttending;\n\n    return (\n      <div className=\"App\">\n        <Header\n          newGuestSubmitHandler={this.newGuestSubmitHandler}\n          pendingGuest={this.state.pendingGuest}\n          handleNameInput={this.handleNameInput}\n        />\n\n        <MainContent\n          removeGuestAt={this.removeGuestAt}\n          pendingGuest={this.state.pendingGuest}\n          isFiltered={this.state.isFiltered}\n          setNameAt={this.setNameAt}\n          toggleEdittingAt={this.toggleEdittingAt}\n          toggleConfirmationAt={this.toggleConfirmationAt}\n          guests={this.state.guests}\n          numberUnconfirmed={numberUnconfirmed}\n          numberAttending={numberAttending}\n          totalInvited={totalInvited}\n          toggleFilter={this.toggleFilter}\n        />\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}